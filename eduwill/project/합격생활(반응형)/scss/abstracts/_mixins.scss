// breakpoint
// @include breakpoint(desktop){ ... }
@mixin breakpoint($point) {
	@if $point == desktop {
		@media screen and (min-width: 1280px) { @content ; }
	}
	@else if $point == tabletGalaxy {
		@media screen and (min-width: 1280px) and (min-height: 800px) { @content ; }
	}
	@else if $point == tablet {
		@media screen and (min-width: 768px) { @content ; }
	}
	@else if $point == tabletLandscape { // for landscape
		@media screen and (min-width: 600px) and (min-height: 600px) { @content ; }
	}
	@else if $point == maxMobile {
		@media screen and (min-width: 720px) { @content ; }
	}
	@else if $point == minMobile {
		@media screen and (max-width: 320px) { @content ; }
	}
}

// Custom devices
// @include rwdWidth(1400) { ... }
@mixin rwdWidth($width) {
	@media (min-width: $width+'px') {
		@content;
	}
}

// @include rwdHeight(480) { ... }
@mixin rwdHeight($height) {
	@media (max-height: $height+'px') {
		@content;
	}
}

// unifyParent
// @include unifyParent("h1") { ... }
@mixin unifyParent($child) {
	@at-root #{selector-unify(&, $child)} {
		@content;
	}
}

// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
// Function
@function get-vw($target){
	// 1 vw is equal to 1% of the viewport width
	$vw-context: ($layout-maxMobile * .01) * 1px; // 1% viewport width
	@return ($target/$vw-context) * 1vw;
}

// Mixin
// @include fontVW(24px);
@mixin fontVW($size){
	font-size: get-vw($size);
	// Prevent font-size from getting too big
	@include breakpoint(maxMobile){
		font-size: $size;
	}
}

// rem
// @include rem(margin, 25px 20px 0);
// https://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) {
	// The mixin relies on a function to parse the integer from a value with a unit
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px: (); // We define a list of values for both units
	$rem: (); // We define a list of values for both units

	@each $value in $values {
	// We iterate through each value in the given parameter $values

		@if $value == 0 or $value == auto {
			// If the value is either auto or 0, we append it to the list as-is
			$px: append($px, $value);
			$rem: append($rem, $value);
		} @else {
			$unit: unit($value); // If the value has a unit, we split it to get both the unit and the raw value
			$val: parseInt($value); // If the value has a unit, we split it to get both the unit and the raw value

			@if $unit == 'px' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, $value);
				$rem: append($rem, ($val / 16 + rem));
			}

			@if $unit == 'rem' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, ($val * 16 + px));
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {
		// If the two lists are the same, we ouput only one (like margin-top: 0)
		#{$property}: $px; // output the result
	} @else {
		#{$property}: $rem;  // output the result
		@include breakpoint(tablet){
			#{$property}: $px;  // output the result
		}
	}
}

// box-sizing
// @include boxSizing(border-box);
@mixin boxSizing($box) {
	@each $prefix in -webkit-, '' {
		#{$prefix}box-sizing: $box;
	}
}

// box-shadow
// @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
@mixin boxShadow($value){
	@each $prefix in -webkit-, -moz-, '' {
		#{$prefix}box-shadow: $value;
	}
}

// animation
// @include animation(2s) {
// 	0% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// 	50% { @include boxShadow(0, 0, 5px, 2px, rgba(251, 104, 90, .3)); }
// 	100% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// }

// @include animation(16s, $iteration: infinite, $timing: linear ,$reverse: reverse) {
// 	100% { @include rotate(360deg); }
// }
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
	// $name: #{unique-id()};

	@-webkit-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
	  @content;
	}

	animation-name: $name;
	animation-duration: $duration;

	@if $iteration {
		animation-iteration-count: $iteration;
	} @else {
		animation-iteration-count: 1;
	}

	@if $timing {
		animation-timing-function: $timing;
	} @else {
		animation-timing-function: ease;
	}

	@if $reverse {
		animation-direction: $reverse;
	} @else {
		animation-direction: normal;
	}
}

// transition
// @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
	@each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
		#{$prefix}transition: $what $time $how;
	}
	@if $how {
		transition-timing-function: $how;
	} @else {
		transition-timing-function: ease-out;
	}
}

// transition delay
// @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
	@each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
		#{$prefix}transition-delay: $delay;
	}
}


// transform
// @include transform(translateX(-50%) rotate(45deg));
@mixin transform($transforms) {
	@each $prefix in -webkit-, -moz-, -ms-, '' {
		#{$prefix}transform: $transforms;
	}
}

// transform : rotate
@mixin rotate($deg) {
	@include transform(rotate($deg));
}

// transform : scale
@mixin scale($x, $y) {
	@include transform(scale($x, $y));
}

// transform : translate XY
@mixin translateXY($x, $y) {
	@include transform(translate($x, $y));
}

// transform : translate X
@mixin translateX($x) {
	@include transform(translateX($x));
}

// transform : translate Y
@mixin translateY($y) {
	@include transform(translateY($y));
}

// transform : skew XY
@mixin skewXY($x, $y) {
	@include transform(skew($x, $y));
}

// transform : skew X
@mixin skewX($x) {
	@include transform(skewX($x));
}

// transform : transform-origin
@mixin transformOrigin($origin) {
	@each $prefix in -webkit-, -moz-, -ms-, '' {
		#{$prefix}transform-origin: $origin;
	}
}

// close
// @include close(30px, 30px, 1px, $color-base-2);
@mixin close($width, $height, $thickness, $color) {
	position: absolute;
	top: 0;
	right: 0;
	display: block;
	width: $width;
	height: $height;
	&:before,
	&:after {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		display: block;
		width: $width / 2;
		height: $thickness;
		margin-left: -($width / 2) / 2;
		background-color: $color;
	}
	&:before { @include rotate(45deg); }
	&:after { @include rotate(-45deg); }
	span { @extend .sr-only; }
}

// arrow
// @include arrow(left, 8px, 8px, 2px, $color-base-2);
@mixin arrow($direction, $width, $height, $borderWidth, $color) {
	content: '';
	position: absolute;
	top: 50%;
	display: block;
	width: $width;
	height: $height;
	margin-top: -($width/2);
	border-width: 0;
	border-style: solid;
	border-color: $color;
	@include rotate(45deg);

	@if $direction == 'right' {
		border-top-width: $borderWidth;
		border-right-width: $borderWidth;
	} @else if $direction == 'left' {
		border-bottom-width: $borderWidth;
		border-left-width: $borderWidth;
	} @else if $direction == 'bottom' {
		border-bottom-width: $borderWidth;
		border-right-width: $borderWidth;
	} @else if $direction == 'top' {
		border-top-width: $borderWidth;
		border-left-width: $borderWidth;
	}
}


/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle

@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
				/ nth($conversion-factors, index($convertable-units, unit($value)))
				* nth($conversion-factors, index($convertable-units, $unit));
	}

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}

@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle

@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}

	$conversion-map: ( 
		to top          : bottom,
		to top right    : bottom left,
		to right top    : left bottom,
		to right        : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom       : top,
		to bottom left  : top right,
		to left bottom  : right top,
		to left         : right,
		to left top     : right bottom,
		to top left     : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient

// @include linear-gradient(#31B7D7, #EDAC7D);
// @include linear-gradient(to right, #fa6568 0%, #ff9048 100%);
// @include linear-gradient(190deg, #f2f3f7 0%, #f2f3f7 50%, #e1ebf5 50%, #e1ebf5 90%, #f2f3f7 90%, #f2f3f7 100%);
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}
