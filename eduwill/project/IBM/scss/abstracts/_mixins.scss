//// mixin
// breakpoint
// @include breakpoint(maxMobile){ ... }
@mixin breakpoint($point) {
    @if $point == desktop {
        @media screen and (min-width: 1100px) { @content ; }
    }
    @else if $point == minDesktop {
        @media screen and (min-width: 1024px) { @content ; }
    }
    @else if $point == tablet {
        @media screen and (min-width: 768px) { @content ; }
    }
    @else if $point == maxMobile {
        @media screen and (min-width: 720px) { @content ; }
    }
    @else if $point == minMobile {
        @media screen and (max-width: 320px) { @content ; }
    }
    @else if $point == custom { // for landscape
        @media screen and (min-width: 540px) { @content ; }
    }
    @else if $point == galaxyfold { // for galaxyfold
        @media screen and (min-width: 590px) and (min-height: 603px) { @content ; }
    }
}

// Custom devices
// @include rwdWidth(1400) { ... }
@mixin rwdWidth($width) {
    @media screen and (max-width: $width+'px') {
        @content;
    }
}

// @include rwdHeight(480) { ... }
@mixin rwdHeight($height) {
    @media screen and (max-height: $height+'px') {
        @content;
    }
}

// box-sizing
// @include boxSizing(border-box);
@mixin boxSizing($box) {
    @each $prefix in -webkit-, '' {
        #{$prefix}box-sizing: $box;
    }
}

// box-shadow
// @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
@mixin boxShadow($value){
    @each $prefix in -webkit-, '' {
        #{$prefix}box-shadow: $value;
    }
}

// transition
// @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
    @each $prefix in -webkit-, -o-, '' {
        #{$prefix}transition: $what $time $how;
    }

    @if $how {
        transition-timing-function: $how;
    } @else {
        transition-timing-function: ease-out;
    }
}

// transition delay
// @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
    @each $prefix in -webkit-, -o-, '' {
        #{$prefix}transition-delay: $delay;
    }
}

// transform
@mixin transform($transforms) {
    @each $prefix in -webkit-, -ms-, '' {
        #{$prefix}transform: $transforms;
    }
}

// transform : rotate
@mixin rotate($deg) {
    @include transform(rotate($deg));
}

// transform : scale
@mixin scale($x, $y) {
    @include transform(scale($x, $y));
}

// transform : translate XY
@mixin translateXY($x, $y) {
    @include transform(translate($x, $y));
}

// transform : translate X
@mixin translateX($x) {
    @include transform(translateX($x));
}

// transform : translate Y
@mixin translateY($y) {
    @include transform(translateY($y));
}

// transform : skew XY
@mixin skewXY($x, $y) {
    @include transform(skew($x, $y));
}

// transform : skew X
@mixin skewX($x) {
    @include transform(skewX($x));
}

// transform : skew Y
@mixin skewy($y) {
    @include transform(skewY($y));
}

// transform : transform-origin
@mixin transformOrigin($origin) {
    @each $prefix in -webkit-, -moz-, -ms-, '' {
        #{$prefix}transform-origin: $origin;
    }
}

@function division($n) {
    // The mixin relies on a function to parse the integer from a value with a unit
    @return $n / 2;
}
// close
// @include close(30px, 30px, 1px, $color-base-dark);
@mixin close($width, $height, $thickness, $color) {
    position: absolute;
    display: block;
    width: $width;
    height: $height;
    &:before,
    &:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        display: block;
        width: division($width);
        height: division($thickness);
        margin-left: -(division($width)) / 2;
        background-color: $color;
        // -webkit-filter: invert(100%);
        // filter: invert(100%);
        // mix-blend-mode: lighten;
        // box-shadow:
        //     // inset .5px .5px 0 rgba(255, 255, 255, 1),
        //     // inset .5px .5px 0 rgba(255, 255, 255, 1),
        //     inset 1px 1px 0 0 rgba(0, 0, 0, 1),
        //     inset 1px 1px 0 0 rgba(0, 0, 0, 1)
        // ;
    }
    &:before { @include rotate(45deg); }
    &:after { @include rotate(315deg); }
    span {
        position: absolute;
        display: inline-block;
        overflow: hidden;
        clip: rect(0 0 0 0);
        width: 0px;
        height: 0px;
        margin: -1px;
        padding: 0;
        word-break: keep-all;
        white-space: nowrap;
        color: transparent;
        border: 0;
        text-indent: -9999px;
    }
}

// arrow
// @include arrow(left, 8px, 8px, 2px, $color-base-dark);
@mixin arrow($direction, $width, $height, $borderWidth, $color) {
    content: '';
    position: absolute;
    top: 50%;
    display: block;
    width: $width;
    height: $height;
    margin-top: -(division($width)) / 2;
    border-width: 0;
    border-style: solid;
    border-color: $color;
    @include rotate(45deg);

    @if $direction == 'right' {
        border-top-width: $borderWidth;
        border-right-width: $borderWidth;
    } @else if $direction == 'left' {
        border-bottom-width: $borderWidth;
        border-left-width: $borderWidth;
    } @else if $direction == 'bottom' {
        border-bottom-width: $borderWidth;
        border-right-width: $borderWidth;
    } @else if $direction == 'top' {
        border-top-width: $borderWidth;
        border-left-width: $borderWidth;
    }
}
// arrow for slide
// @include slideArrow(left, 60px, 60px, 2px, #000);
// @include slideArrow(right, 60px, 60px, 2px, #000);
// @include slideArrow(left, 60px, 60px, 2px, #fff, rgba(0,0,0,.7));
// @include slideArrow(right, 60px, 60px, 2px, #fff, rgba(0,0,0,.7));
@mixin slideArrow($direction, $width, $height, $borderWidth, $borderColor, $bgColor: null) {
    position: absolute;
    top: 50%;
    z-index: 10;
    display: block;
    @include rem(width, $width);
    @include rem(height, $height);
    margin: 0;
    padding: 0;
    font-size: 0;
    color: transparent;
    text-indent: -9999px;
    border: none;
    outline: none;
    cursor: pointer;
    @include translateY(-50%);

    @if $bgColor {
        background: $bgColor;
    } @else {
        background: none;
    }

    &:before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        display: block;
        @include rem(width, ($width/4));
        @include rem(height, ($height/4));
        border-width: 0;
        border-style: solid;
        border-color: $borderColor;

        @if $direction == 'right' {
            border-top-width: $borderWidth;
            border-right-width: $borderWidth;
            @include transform(translate(-75%, -50%) rotate(45deg));
        } @else if $direction == 'left' {
            border-bottom-width: $borderWidth;
            border-left-width: $borderWidth;
            @include transform(translate(-25%, -50%) rotate(45deg));
        } @else if $direction == 'bottom' {
            border-bottom-width: $borderWidth;
            border-right-width: $borderWidth;
            @include transform(translate(-50%, -75%) rotate(45deg));
        } @else if $direction == 'top' {
            border-top-width: $borderWidth;
            border-left-width: $borderWidth;
            @include transform(translate(-50%, -25%) rotate(45deg));
        }
    }
}

// rem
// @include rem(margin, 25px 20px 0);
// https://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) {
    // The mixin relies on a function to parse the integer from a value with a unit
    @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
    $px: (); // We define a list of values for both units
    $rem: (); // We define a list of values for both units

    @each $value in $values {
    // We iterate through each value in the given parameter $values

        @if $value == 0 or $value == auto {
            // If the value is either auto or 0, we append it to the list as-is
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value); // If the value has a unit, we split it to get both the unit and the raw value
            $val: parseInt($value); // If the value has a unit, we split it to get both the unit and the raw value

            @if $unit == 'px' {
                // We append according values to the lists depending on the unit of the given value
                $px: append($px, $value);
                $rem: append($rem, ($val / 16 / 2+ rem));
            }

            @if $unit == 'rem' {
                // We append according values to the lists depending on the unit of the given value
                $px: append($px, ($val * 16 + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        // If the two lists are the same, we ouput only one (like margin-top: 0)
        #{$property}: $px; // output the result
    } @else {
        #{$property}: $rem;  // output the result
        @include breakpoint(maxMobile){
            #{$property}: $px; // output the result
        }
    }
}

// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
// Function
@function get-vw($target){
    // 1 vw is equal to 1% of the viewport width
    $vw-context: ($max-mobile * .01) * 1px; // 1% viewport width
    @return ($target/$vw-context) * 1vw;
}

// Mixin
@mixin vw($size){
    font-size: get-vw($size);
    // Prevent font-size from getting too big
    @include breakpoint(maxMobile){
        font-size: $size;
    }
}

// Function
@function percent($target, $parent: $max-mobile) {
    @return percentage($target / $parent);
}

// animation
// @include animation(shadow, 2s) {
// 	0% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// 	50% { @include boxShadow(0, 0, 5px, 2px, rgba(251, 104, 90, .3)); }
// 	100% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// }

// @include animation(rotation, 16s, $iteration: infinite, $timing: linear ,$reverse: reverse) {
// 	100% { @include rotate(360deg); }
// }
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
    //$name: inline-$name;

    @keyframes #{$name} {
    @content;
    }

    animation-name: $name;
    animation-duration: $duration;

    @if $iteration {
        animation-iteration-count: $iteration;
    } @else {
        animation-iteration-count: 1;
    }

    @if $timing {
        animation-timing-function: $timing;
    } @else {
        animation-timing-function: ease;
    }

    @if $reverse {
        animation-direction: $reverse;
    } @else {
        animation-direction: normal;
    }
}
